package zhy2002.leetcode.tests;

import zhy2002.leetcode.solutions.validsudoku.Solution;
import org.junit.Test;
import static org.junit.Assert.*;

public class ValidSudokuTests {

    @Test
    public void basicTest(){
        Solution solution = new Solution();
        char[][] input = {
        {'.','8','7','6','5','4','3','2','1'},
        {'2','.','.','.','.','.','.','.','.'},
        {'3','.','.','.','.','.','.','.','.'},
        {'4','.','.','.','.','.','.','.','.'},
        {'5','.','.','.','.','.','.','.','.'},
        {'6','.','.','.','.','.','.','.','.'},
        {'7','.','.','.','.','.','.','.','.'},
        {'8','.','.','.','.','.','.','.','.'},
        {'9','.','.','.','.','.','.','.','.'}};
        assertTrue(solution.isValidSudoku(input));

        char[][] input2 = {
                {'.','8','7','6','5','4','3','2','1'},
                {'2','.','.','.','.','.','.','.','.'},
                {'3','.','.','.','.','.','.','.','.'},
                {'4','.','.','.','.','6','.','.','.'},
                {'5','.','.','.','.','.','.','.','.'},
                {'6','.','.','.','.','.','.','.','9'},
                {'7','.','.','.','.','.','.','8','.'},
                {'8','2','.','.','.','.','.','.','.'},
                {'9','.','.','1','.','.','.','.','.'}};
        assertTrue(solution.isValidSudoku(input2));

        char[][] input3 = {
                {'.','8','7','6','5','4','3','2','1'},
                {'2','.','.','.','.','.','.','.','.'},
                {'3','.','.','.','.','.','.','.','.'},
                {'4','.','.','.','.','6','.','.','.'},
                {'5','.','.','.','.','.','.','.','.'},
                {'6','.','.','.','.','.','.','.','9'},
                {'7','.','.','.','.','.','.','8','.'},
                {'8','2','.','.','.','.','.','.','.'},
                {'9','.','2','1','.','.','.','.','.'}};
        assertFalse(solution.isValidSudoku(input3));

        char[][] input4 = {
                {'.','8','7','6','5','4','3','2','1'},
                {'2','.','.','.','.','.','.','.','.'},
                {'3','.','.','.','.','.','.','.','.'},
                {'4','.','.','.','.','6','.','.','.'},
                {'5','.','.','.','.','.','.','.','.'},
                {'6','.','.','.','.','.','.','.','9'},
                {'7','.','.','.','.','.','.','8','.'},
                {'8','2','.','.','.','.','.','.','.'},
                {'9','.','3','1','.','.','.','.','2'}};
        assertTrue(solution.isValidSudoku(input4));

        char[][] input5 = {
                {'.','8','7','6','5','4','3','2','1'},
                {'2','.','.','.','.','.','.','.','.'},
                {'3','.','.','.','.','.','.','.','.'},
                {'4','.','.','.','.','6','.','2','.'},
                {'5','.','.','.','.','.','.','.','.'},
                {'6','.','.','.','.','.','.','.','9'},
                {'7','.','.','.','.','.','.','8','.'},
                {'8','2','.','.','.','.','.','.','.'},
                {'9','.','3','1','.','.','.','.','2'}};
        assertFalse(solution.isValidSudoku(input5));


    }
}
