package zhy2002.leetcode.tests;

 import org.junit.Test;
 import zhy2002.leetcode.Utils;
 import zhy2002.leetcode.solutions.sudokusolver.MultipleSolution;
 import zhy2002.leetcode.solutions.sudokusolver.Solution;
 import static org.junit.Assert.*;

public class SudokuSolverTests {

    @Test
    public void basicTest(){
        //"..9748...","7........",".2.1.9...","..7...24.",".64.1.59.",".98...3..","...8.3.2.","........6","...2759.."]
        Solution solution = new Solution();
        char[][] board = {
                {'.','.','9','7','4','8','.','.','.'},
                {'7','.','.','.','.','.','.','.','.'},
                {'.','2','.','1','.','9','.','.','.'},
                {'.','.','7','.','.','.','2','4','.'},
                {'.','6','4','.','1','.','5','9','.'},
                {'.','9','8','.','.','.','3','.','.'},
                {'.','.','.','8','.','3','.','2','.'},
                {'.','.','.','.','.','.','.','.','6'},
                {'.','.','.','2','7','5','9','.','.'}
        };

        solution.solveSudoku(board);
        String result = Utils.charMatrixToString(board);
        assertEquals("519748632 783652419 426139875 357986241 264317598 198524367 975863124 832491756 641275983", result);

    }

    @Test
    public void multipleTest(){
        MultipleSolution multipleSolution = new MultipleSolution();
        char[][] board0 = {
                {'.','.','5','.','.','6','.','.','.'},
                {'.','.','.','.','.','.','.','.','.'},
                {'3','.','.','8','1','.','.','.','.'},
                {'.','.','.','.','.','.','.','6','3'},
                {'6','.','3','1','.','4','.','.','.'},
                {'9','.','.','6','.','.','.','.','7'},
                {'.','.','.','.','.','.','.','.','.'},
                {'7','.','.','.','.','9','.','.','.'},
                {'.','.','.','3','.','.','.','.','.'}
        };
        char[][] board1 = {
                {'2','5','.','.','.','.','.','.','.'},
                {'.','.','9','8','.','1','.','.','.'},
                {'.','.','.','.','.','2','.','3','9'},
                {'9','.','.','3','.','.','.','.','.'},
                {'.','6','.','4','.','.','.','7','.'},
                {'.','.','4','.','.','8','6','.','1'},
                {'.','.','2','6','.','7','.','.','5'},
                {'.','.','.','2','.','.','.','.','.'},
                {'.','.','7','.','.','.','3','.','.'}
        };
        char[][] board2 = {
                {'.','.','.','.','6','2','.','9','3'},
                {'.','.','.','.','.','.','6','.','.'},
                {'9','.','2','7','.','.','.','.','.'},
                {'4','1','3','.','.','.','.','.','.'},
                {'.','.','.','.','.','.','1','.','.'},
                {'.','.','.','1','.','3','8','.','6'},
                {'.','.','.','.','7','1','.','6','.'},
                {'.','.','.','.','.','4','9','.','.'},
                {'.','.','.','.','.','.','2','.','.'}
        };
        char[][] board3 = {
                {'.','.','.','5','.','.','.','.','.'},
                {'4','.','8','.','.','.','7','.','.'},
                {'3','.','.','6','.','.','.','.','.'},
                {'.','.','.','2','.','5','4','.','8'},
                {'8','7','.','1','.','.','.','.','3'},
                {'.','2','.','.','.','.','.','.','.'},
                {'6','4','.','9','.','.','3','.','7'},
                {'.','.','.','7','.','.','6','.','.'},
                {'.','.','.','.','5','.','.','.','.'}
        };
        char[][] board4 = {
                {'.','.','.','4','.','5','.','.','3'},
                {'.','.','.','7','.','.','.','.','.'},
                {'.','.','.','.','.','.','.','8','2'},
                {'.','9','1','.','8','7','6','4','.'},
                {'8','.','.','.','.','.','.','.','.'},
                {'.','.','.','.','.','9','.','.','.'},
                {'4','.','.','.','3','.','.','9','8'},
                {'.','5','.','.','.','.','.','.','.'},
                {'.','1','.','6','.','.','.','5','.'}
        };

        boolean solvable = multipleSolution.solveMultiple(board0, board1, board2, board3,board4);
        assertTrue(solvable);
    }
}
